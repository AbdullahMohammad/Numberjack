#!/usr/bin/env python


from utils import Command
import datetime
import sys
import os


"""
    The argument '-a' to print all solutions is ignored for now.
    The free search argument -f is assumed since we do not support specifying
    the search strategy.
"""

usage_string = ("Usage: %s [-p num_threads] [-t timelimit] [-m memlimit] "
                "fzn_filename" % sys.argv[0])
fzn2py = os.path.join(os.path.dirname(os.path.realpath(__file__)), "fzn2py")


def translate_fzn_to_nj(fznfilename, timelimit,
                        njfilename=None, memlimit=None):
    if not njfilename:
        import tempfile
        temp_f = tempfile.NamedTemporaryFile(delete=False)
        njfilename = temp_f.name
        # TODO: check if we should temp_f.close() first.

    # launch subprocess to convert the file to python file
    cmd = "%s %s > %s" % (fzn2py, fznfilename, njfilename)
    c = Command(cmd, memlimit=memlimit)
    c.run(timelimit)

    # Check for errors during translation
    if c.timed_out:
        print >> sys.stderr, "Fatal error: could not translate the", \
            "fzn-python/Numberjack within the timelimit."
        sys.exit(1)
    if c.exitcode != 0:
        if "No such file or directory" in c.stderr:
            print >> sys.stderr, \
                "Error: fzn file '%s' does not exist." % fznfilename
        else:
            print >> sys.stderr, \
                "Error during fzn-python/Numberjack translation.", \
                c.stdout, "\n", c.stderr
        sys.exit(1)

    return njfilename


def parse_arg_val(args, argname, default=None):
    value = default
    if argname in args:
        ind = args.index(argname)
        if ind + 1 < len(args):
            value = int(args[ind + 1])
            # By deleting these arguments from the list, we support specifying
            # the fzn_filename before the optional arguments, as well as after.
            del args[ind + 1]
            del args[ind]
        else:
            print >> sys.stderr, \
                "Error: %s specified without a subsequent value." % argname
            sys.exit(1)
    return value


if __name__ == '__main__':
    totaltime = datetime.datetime.now()
    args = sys.argv[1:]

    if len(args) == 0:
        print >> sys.stderr, usage_string
        sys.exit(1)

    numthreads = parse_arg_val(args, "-p", default=1)
    timelimit = origtimelimit = float(parse_arg_val(args, "-t", default=900))
    memlimit = parse_arg_val(args, "-m", default=1600000000)
    if len(args) != 1:
        print >> sys.stderr, "Unknown arguments found:", args
        print >> sys.stderr, usage_string
        sys.exit(1)
    fznfilename = args[-1]

    print ("%% Running Numberjack on %s with up to %d threads, timelimit:%.1f,"
           " memlimit:%d." % (fznfilename, numthreads, timelimit, memlimit))
    translatetime = datetime.datetime.now()
    njfilename = translate_fzn_to_nj(fznfilename, timelimit)
    translatetime = (datetime.datetime.now() - translatetime).total_seconds()

    print "%% Translated Numberjack file at %s" % njfilename
    timelimit -= translatetime

    runtime = datetime.datetime.now()
    cmd = "python %s" % njfilename
    c = Command(cmd, memlimit=memlimit)
    c.run(timelimit)
    runtime = (datetime.datetime.now() - runtime).total_seconds()

    if c.timed_out:
        print >> sys.stderr, \
            "% Warning: solver timed out, no solution returned."
    elif c.exitcode == 0:
        print c.stdout
    else:
        print >> sys.stderr, "Error %d" % c.exitcode
        print >> sys.stderr, c.stdout, "\n", c.stderr
    totaltime = (datetime.datetime.now() - totaltime).total_seconds()
    print "%% Translate time: %.1f" % translatetime
    print "%% Run time: %.1f" % runtime
    print "%% Took %.1f seconds in total." % totaltime
